#version 440

//layout(r8, binding = 0) uniform readonly image2D originalImage;
//layout(r8, binding = 1) uniform readonly image2D sortedImage;

layout(std430, binding = 0) buffer pixelBuffer {
	vec3 pixels[];
};

uniform uint maxIndex;
uniform uint widthOrHeight;
uniform uint imageHeight;
uniform uint imageWidth;
uniform uint bytesPerPixel;
uniform bool horizontal;
uniform bool reverse;
uniform float threshold;

uint getActualIndex(uint index, uint column, uint bytesPerPixel, uint imageWidth, bool isHorizontal);
void swapPixels(uint index1, uint index2);
vec3 rgb2hsv(vec3 c);


layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main() {
	
	if (gl_LocalInvocationIndex < maxIndex) {
		return;
	}
	if (gl_LocalInvocationIndex % 2 == 0) {
		swapPixels(gl_GlobalInvocationID.x, gl_GlobalInvocationID.x + 1);
	}
	return;
	/*vec3 pixel = pixels[gl_GlobalInvocationID.x];
	pixels[gl_GlobalInvocationID.x] = vec3(min(1, pixel.r + 0.1), min(1, pixel.g + 0.1), min(1,pixel.b + 0.1));
	return;*/
	//uint pixelSwapBuffer[4];
	//uint colorArray[4];

	uint start = gl_GlobalInvocationID.x;
	uint end;
	if (horizontal) {
		end = (start + 1) * widthOrHeight;
	}
	else {
		end = imageHeight;
	}

	float highestVal;
	uint indexOfHighest;

	uint startOfInterval = 0;
	uint endOfInterval = 0;
	bool intervalStarted = false;

	vec3 color = vec3(0, 0, 0);

	for (uint i = start * widthOrHeight; i < end; i++) {
		uint actualI = getActualIndex(i, start, bytesPerPixel, imageWidth, horizontal);
		uint actualI2 = getActualIndex(i + 1, start, bytesPerPixel, imageWidth, horizontal);

		swapPixels(actualI, actualI2);
		continue;
		vec3 pixel = pixels[actualI];
		vec3 hsvColor = rgb2hsv(pixel);
		//float value = getThresholdVariableFromColor(color, currentlySelectedThresholdVariable);
		float value = pixel.r;// hsvColor.z;
		if (value >= threshold) {
			if (!intervalStarted) {
				startOfInterval = i;
				intervalStarted = true;
				continue;
			}
			else {
				// If we are above threshold and we already have a valid startOfInterval
				// then we extend endOfInterval to the current index, we have special logic here 
				// to ensure that if we are at the end of a row we sort the currently started interval
				endOfInterval = i;
				if (!(i == end - 1)) {
					continue;
				}
				else {
					// this is the end of a row or column so we will sort this interval
				}
			}
		}
		else {
			if (!intervalStarted) {
				// If we are under threshold and there is no start of interval then there is nothing to do here
				continue;
			}
			else {
				// If we are below threshold and we have a valid startOfInterval index
				// then this means that we have found our interval and we will move on
				// to sort that interval in the following nested loop
			}
		}

		for (uint s = startOfInterval; s <= endOfInterval; s++) {
			uint modS = s;
			if (reverse) {
				modS = endOfInterval - s + startOfInterval;
			}
			uint actualS = getActualIndex(modS, start, bytesPerPixel, imageWidth, horizontal);
			indexOfHighest = actualS;
			highestVal = -1;
			for (uint j = s; j <= endOfInterval; j++) {
				uint modJ = j;
				if (reverse) {
					modJ = endOfInterval - j + startOfInterval;
				}
				uint actualJ = getActualIndex(modJ, start, bytesPerPixel, imageWidth, horizontal);
				vec3 pixel = pixels[actualJ];
				vec3 hsvColor = rgb2hsv(pixel);
				float val = pixel.r;// hsvColor.z;
				if (val > highestVal) {
					highestVal = val;
					indexOfHighest = actualJ;
				}
			}
			swapPixels(actualS, indexOfHighest);
		}
		startOfInterval = 0;
		endOfInterval = 0;
		intervalStarted = false;
	}

}

uint getActualIndex(uint index, uint column, uint bytesPerPixel, uint imageWidth, bool isHorizontal) {
	if (isHorizontal) {
		return index;
	}
	else {
		return (index * imageWidth) + (column * bytesPerPixel);
	}
}

void swapPixels(uint index1, uint index2) {
	vec3 temp = pixels[index1];
	pixels[index1] = pixels[index2];
	pixels[index2] = temp;
	//for (int c = 0; c < bytesPerPixel; c++) {
	//	pixelSwapBuffer[c] = pixels[index1 + c];
	//}
	//for (int c = 0; c < bytesPerPixel; c++) {
	//	pixels[index1 + c] = pixels[index2 + c];
	//}
	//for (int c = 0; c < bytesPerPixel; c++) {
	//	pixels[index2 + c] = pixelSwapBuffer[c];
	//}
}

// From https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl
// All components are in the range [0…1], including hue.
vec3 rgb2hsv(vec3 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}